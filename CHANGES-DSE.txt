dse 6.0.0
 * Add command line tool for NodeSync (APOLLO-948)
 * Always split local token range based on num of cores (APOLLO-934)
 * Update bundled Python driver to 2.2.0.post0-d075d57 (APOLLO-1152)
 * Rename ITrigger interface method from "augment" to "augmentNonBlocking" (APOLLO-1046)
 * Remove unnecessary options and stages post-TPC (APOLLO-945)
 * Changes Flow to combine subscription with first request (APOLLO-1074)
 * Make incremental repair opt-in (APOLLO-1126)
 * Expose ports (storage, native protocol, JMX) in system local and peers tables (APOLLO-1040)
 * Fix trie file construction bugs (APOLLO-1055)
 * Continuous paging backpressure and integration with TPC (APOLLO-707)
 * SystemKeyspace.snapshotOnVersionChange() never called in production code (APOLLO-797)
 * Internal implementation of paging by bytes (APOLLO-414).
 * Check for mismatched versions when answering schema pulls (APOLLO-1026)
 * Add nodesync as a valid choice to cqlshlib completion tests for table creation (APOLLO-1056)
 * Limit the number of concurrent requests in TPC and retry on EAGAIN (APOLLO-1011)
 * Allow altering nodesync param on distributed system tables (APOLLO-965)
 * Clarify resource clean-up by Flow and flowable partitions (APOLLO-1074)
 * Do not use memory-mapping for the commit log (APOLLO-1061)
 * Introduce new STARTUP message parameters to identify clients (APOLLO-1054)
 * Load mmapped buffer into physical memory after mlocking it for MemoryOnlyStrategy (APOLLO-1052)
 * Change protocol to allow sending key space independent of query string (APOLLO-600)
 * Various optimizations to the Flow infrastructure (APOLLO-970)
 * Prevent multiple serializations of Mutation (APOLLO-370)
 * Allow to grant/revoke multiple permissions in one statement (APOLLO-792)
 * Fix bug in counting iterated sstables for choosing whether or not to defrag in timestamp ordered path (APOLLO-1018)
 * Corrects improper use of Flow.close() for cancellation (APOLLO-1031)
 * TPC counterpart to thread pool statistics (APOLLO-712)
 * Improvements to trie index size (APOLLO-759)
 * Use shaded mobility-rpc jar to fix DSE build issues (APOLLO-839)
 * Better exception handling for counter mutations (APOLLO-576)
 * When "repairing" Paxos commits, only block on nodes being repaired (APOLLO-761)
 * MigrationManager should use toDebugString() when logging TableMetadata (APOLLO-739)
 * Fix LWT asserts for immutable TableMetadata (APOLLO-728)
 * Add DSE columns to system tables (APOLLO-716)
 * Avoid unnecessary deserialization of terminal arguments when executing functions(APOLLO-588)
 * Allow to aggregate by time intervals (APOLLO-75)
 * Port Memory Only Strategy from DSE to Apollo (APOLLO-342)
 * Internode message interceptors for testing (APOLLO-419)
 * Byte-ordered types and trie-based indices (APOLLO-111)
 * Refactor messaging service code (APOLLO-497)
 * Bump default client protocol version from V4 to DSE_V1 (APOLLO-553)
 * Fix build due to "ow2" repository issues (apollo-master follow-up of CASSANDRA-13278) (APOLLO-494)
 * For TWCS, flush to separate sstables based on write time (APOLLO-42)
 * Cleanup maven dependencies and download sources on maven ant tasks (APOLLO-302)
Merged from dse5.1:
 * Always define execution_profiles in cqlsh.py (APOLLO-1150)
 * Fix stress-tool not outputting row/s (APOLLO-1123)
 * Make o.a.c.metrics extend org.codahale.metrics to fix Metrics Reporter (APOLLO-811)
 * Make sure to handle range queries while filtering (APOLLO-546)
 * Allow mapping a single column to multiple SASI indexes (APOLLO-521)
 * Properly evict pstmts from prepared statements cache (APOLLO-818)
 * Add `nodetool sequence` batch functionality (APOLLO-651)
 * null assertion in MemtablePostFlush (APOLLO-708)
 * Show correct protocol version in cqlsh (APOLLO-616)
 * Update to logback-1.2.3 and redefine default rotation policy (APOLLO-643)
 * Guard mapped memory accesses with an assertion instead of segfaulting JVM (APOLLO-586)
 * Backport follow-up commit to CASSANDRA-12929
 * Fix version check to enable streaming keep-alive (backport CASSANDRA-12929)
 * Only perform drop below RF check on decommission for non-partitioned keyspaces (APOLLO-589)
 * Fix SmallInt and TinyInt serialization (APOLLO-542)
 * Check for null/empty password before calling legacyAuthenticate from CassandraLoginModule (APOLLO-412)
 * Allow registering user expression on SelectStatement (APOLLO-491)
 * Apply request timeout in cqlsh COPY correctly, after upgrading to execution profiles (APOLLO-411)
 * Update java driver to DSE driver version 1.2.0-eap5-SNAPSHOT (APOLLO-357)
 * Fix AssertionError in Continuous Paging Request on select count(*) query (APOLLO-387)
 * Update internal DSE driver and fix formatting for Duration type (APOLLO-417)
 * Replace open source Python driver with Datastax Enterprise driver (APOLLO-349)
 * Fix OutOfSpaceTest broken by APOLLO-227 (APOLLO-350)
 * Allow to add IndexRestrictions to SelectStatement in an immutable way (APOLLO-323)
 * Allow grammar extensions to be added to cqlsh for tab completion (APOLLO-295)
 * Improve compaction performance (APOLLO-123)
 * Add client warning to SASI index (APOLLO-93)
 * Cqlsh copy-from: add support for UNSET values (APOLLO-4)
 * Improve error message for incompatible authn/authz config (APOLLO-226)
 * Continuous paging (APOLLO-3, APOLLO-267, APOLLO-277, APOLLO-291, APOLLO-312, APOLLO-316, APOLLO-432, APOLLO-438, APOLLO-517)
 * Added show-queries, query-log-file and no-progress log options to cassandra-stress (APOLLO-41)
 * Allow large partition generation in cassandra-stress user mode (APOLLO-35)
 * Optimize VIntCoding and BufferedDataOutputStreamPlus (APOLLO-49)
 * Improve metrics and reduce overhead under contention (APOLLO-81)
 * Make SinglePartitionReadCommand::queriesMulticellType() faster (APOLLO-117)
 * Accept internal resource name in GRANT/REVOKE statements (APOLLO-113)
 * Improve StatementRestrictions::getPartitionKeys() execution speed (APOLLO-115)
 * Move responsibility for qualifying ks in authz stmts to IResource (APOLLO-76)
 * Insert default superuser role with fixed timestamp (APOLLO-18)
 * Make Permissions extensible (APOLLO-26)
 * Make IResource more easily extensible (APOLLO-26)
 * Add method to IAuthenticator to login by user as well as by role (APOLLO-70)
 * Add private protocol version (APOLLO-2)
 * Backport CASSANDRA-13084: Avoid byte-array copy when key cache is disabled (no APOLLO ticket)
 * Backport CASSANDRA-12510: Require forceful decommission if number of nodes is less than replication factor (no APOLLO ticket)
 * Backport CASSANDRA-12654: Allow IN restrictions on column families with collections (no APOLLO ticket)
 * Backport CASSANDRA-13028: Log message size in trace message in OutboundTcpConnection (no APOLLO ticket)
 * Backport CASSANDRA-13029: Add timeUnit Days for cassandra-stress (no APOLLO ticket)
 * Backport CASSANDRA-12649: Add mutation size and batch metrics (no APOLLO ticket)
 * Backport CASSANDRA-12999: Add method to get size of endpoints to TokenMetadata (no APOLLO ticket)
 * Backport CASSANDRA-8398: Expose time spent waiting in thread pool queue (no APOLLO ticket)
 * Backport CASSANDRA-12969: Conditionally update index built status to avoid unnecessary flushes (no APOLLO ticket)
 * Backport CASSANDRA-12946: cqlsh auto completion: refactor definition of compaction strategy options (no APOLLO ticket)
 * Backport CASSANDRA-11935: Add support for arithmetic operators (no APOLLO ticket)
Merged from dse5.0:
 * Make scrub validate the partition key, add validation to schema mutation creation (APOLLO-657)
 * Group multiple view updates within the same base partition to speedup view build process(APOLLO-969)
 * Add nodetool mark_unrepaired command (APOLLO-692)
 * Disallow incremental repair on MV/CDC tables (APOLLO-596)
 * Revert CASSANDRA-11223 behavior in AbstractReadCommandBuilder (APOLLO-1010)
 * Simplify role-permissions handling (APOLLO-796)
 * fix completed rebuild logging always says 0 bytes (APOLLO-810)
 * nodetool rebuild & bootstrap improvements (APOLLO-581)
 * Coerce integer JSON values to timestamp as well as long values (APOLLO-483)
 * On node failure, fail only repair tasks of that node (APOLLO-669)
 * Fail remaining ongoing tasks when aborting a repair job (APOLLO-669)
 * Handle missing metadata when opening a keyspace (APOLLO-395)
 * Bounded range splitting token allocation for first RF nodes (APOLLO-121)
 * Backport CASSANDRA-12858: Add the range limit for the split ratio in PartitionerTestCase (APOLLO-121)
 * Partial backport of token splitting from CASSANDRA-12777: Implement the NoReplicationTokenAllocator (APOLLO-121)
 * Log when waiting remaining repair tasks to finish (APOLLO-103)
 * Avoid AssertionError when shutting down finished repair executor (APOLLO-119)
 * Add allocate_tokens_for_local_replication_factor flag (APOLLO-34)
 * Backport CASSANDRA-13080: Use new token allocation for non bootstrap case as well (APOLLO-34)
 * Backport CASSANDRA-12990: More fixes to the TokenAllocator (APOLLO-34)
 * cqlsh SOURCE cmd shouldn't assume PlainTextAuthenticator (APOLLO-492)
 * Skip flush on repair streaming (APOLLO-466)
 * Minor optimization in GPFS, and related snitches (APOLLO-479)
 * Issue CQL native protocol warning that DTCS is deprecated (APOLLO-327)
 * Log message when rebuild has finished (APOLLO-465)
 * Improve repair overstreaming for multi-DCs and large RFs (APOLLO-390)
 * Connection refused should be logged less frequently (APOLLO-455)
 * Always log flush errors (APOLLO-227)
 * Disable preemptive sstable opening if sstable_preemptive_open_interval_in_mb <= 0,
   and warn about high GC pressure for values below 4 (APOLLO-386)
 * Filter out duplicate sstables when performing snapshots to avoid
   duplicate hardlink errors (APOLLO-290)
 * Prevent duplicate SyncUtil.force() in SeqentialWriter on close (APOLLO-351)
 * Perform repair sync sequentially to avoid overloading coordinator (APOLLO-216)
 * Backport CASSANDRA-11503: Add repaired percentage metric (APOLLO-88)
 * Backport CASSANDRA-10134: Always perform collision check before joining ring (APOLLO-232)
 * Backport CASSANDRA-12461: (Add pre- and post-shutdown hooks to Storage Service) (APOLLO-48)
 * Wait for remaining tasks to finish on RepairJob after task failure (APOLLO-87)
 * Exponential backoff when hint delivery fails (APOLLO-17)
Merged from DSE 4.8.14:
 * Allow aggressive expiration of fully expired sstables without timestamp/key overlap checks (APOLLO-902)
 * Integrate top threads command in nodetool (APOLLO-652)

